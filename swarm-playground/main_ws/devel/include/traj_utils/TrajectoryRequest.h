// Generated by gencpp from file traj_utils/TrajectoryRequest.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_TRAJECTORYREQUEST_H
#define TRAJ_UTILS_MESSAGE_TRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <quadrotor_msgs/GoalSet.h>

namespace traj_utils
{
template <class ContainerAllocator>
struct TrajectoryRequest_
{
  typedef TrajectoryRequest_<ContainerAllocator> Type;

  TrajectoryRequest_()
    : goalset()  {
    }
  TrajectoryRequest_(const ContainerAllocator& _alloc)
    : goalset(_alloc)  {
  (void)_alloc;
    }



   typedef  ::quadrotor_msgs::GoalSet_<ContainerAllocator>  _goalset_type;
  _goalset_type goalset;





  typedef boost::shared_ptr< ::traj_utils::TrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::TrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryRequest_

typedef ::traj_utils::TrajectoryRequest_<std::allocator<void> > TrajectoryRequest;

typedef boost::shared_ptr< ::traj_utils::TrajectoryRequest > TrajectoryRequestPtr;
typedef boost::shared_ptr< ::traj_utils::TrajectoryRequest const> TrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::TrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::TrajectoryRequest_<ContainerAllocator1> & lhs, const ::traj_utils::TrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goalset == rhs.goalset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::TrajectoryRequest_<ContainerAllocator1> & lhs, const ::traj_utils::TrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::TrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::TrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::TrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7bc31786bdfd00a184cc37e4fc7d82f0";
  }

  static const char* value(const ::traj_utils::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7bc31786bdfd00a1ULL;
  static const uint64_t static_value2 = 0x84cc37e4fc7d82f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/TrajectoryRequest";
  }

  static const char* value(const ::traj_utils::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/GoalSet goalset\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/GoalSet\n"
"int16 drone_id\n"
"float32[3] goal\n"
;
  }

  static const char* value(const ::traj_utils::TrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goalset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::TrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::TrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "goalset: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >::stream(s, indent + "  ", v.goalset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_TRAJECTORYREQUEST_H
